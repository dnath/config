# Read File Into Vector
snippet readfile
	std::vector<char> v;
	if (FILE *${2:fp} = fopen(${1:"filename"}, "r")) {
		char buf[1024];
		while (size_t len = fread(buf, 1, sizeof(buf), $2))
			v.insert(v.end(), buf, buf + len);
		fclose($2);
	}${3}
# std::map
snippet map
	std::map<${1:key}, ${2:value}> map${3};
# std::vector
snippet vector
	std::vector<${1:char}> v${2};
# Namespace
snippet ns
	namespace ${1:`Filename('', 'my')`} {
		${2}
	} /* $1 */
# using namespace
snippet use
	using namespace ${1:std}$2;
# cin
snippet ci
	cin >> ${1};
# cout 
snippet co
	cout << ${1};
# write to file
snippet fwp
	ofstream ${1:fout}(${2:filename}, ${3:ios::out});
	if ($1.is_open()) {
		${4}
		$1.close();
	}
# read file
snippet frp variable
	ifstream ${1:fin}(${2:filename}, ${3:ios::in});
	if ($1.is_open()) {
		while(!$1.eof()) {
			${4:char} ${5:c};
			$1 >> $5;
			${6}
		}
		$1.close();
	}
snippet frp line
	ifstream ${1:fin}(${2:filename}, ${3:ios::in});
	if ($1.is_open()) {
		string ${4:line};
		while(getline($1, $4)) {
			${5}
		}
		$1.close();
	}
snippet frp block
	ifstream ${1:fin}(${2:filename}, ${3:ios::in});
	if ($1.is_open()) {
		$1.seekg(0, $1.end);
		int ${4:block_len} = $1.tellg();
		$1.seekg(0, $1.beg);
		
		char *${5:buffer} = new char [$4];
		$1.read($5, $4);
		${6}
		$1.close();
	}
# Class
snippet cl
	class ${1:`Filename('$1_t', 'name')`} {
	public:
		$1 (${2:arguments});
		virtual ~$1 ();

	private:
		${3:/* data */}
	};
snippet fori
	for (int ${2:i} = 0; $2 < ${1:count}; $2${3:++}) {
		${4:/* code */}
	}
